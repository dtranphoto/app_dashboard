name: Build & Deploy Dashboard (EKS)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-west-2
  ECR_REGISTRY: 386503255039.dkr.ecr.us-west-2.amazonaws.com
  IMAGE_TAG: latest

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      region: ${{ env.AWS_REGION }}
    steps:
      - name: üß± Set shared output
        run: echo "Setup complete"

  dashboard:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v2
      - name: üèóÔ∏è Build & Push Dashboard Frontend
        run: |
          docker build -t $ECR_REGISTRY/dashboard-frontend:$IMAGE_TAG -f Dockerfile.frontend .
          docker push $ECR_REGISTRY/dashboard-frontend:$IMAGE_TAG

  mockapi:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v2
      - name: üèóÔ∏è Build & Push Mock API
        run: |
          docker build -t $ECR_REGISTRY/mock-api:$IMAGE_TAG -f Dockerfile.mock_api .
          docker push $ECR_REGISTRY/mock-api:$IMAGE_TAG

  prometheus:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v2
      - name: üèóÔ∏è Build & Push Prometheus
        run: |
          docker build -t $ECR_REGISTRY/prometheus:$IMAGE_TAG -f Dockerfile.prometheus .
          docker push $ECR_REGISTRY/prometheus:$IMAGE_TAG

  alertmanager:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v2
      - name: üèóÔ∏è Build & Push Alertmanager
        run: |
          docker build -t $ECR_REGISTRY/alertmanager:$IMAGE_TAG -f Dockerfile.alertmanager .
          docker push $ECR_REGISTRY/alertmanager:$IMAGE_TAG

  grafana:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: aws-actions/amazon-ecr-login@v2
      - name: üèóÔ∏è Build & Push Grafana
        run: |
          docker build -t $ECR_REGISTRY/grafana:$IMAGE_TAG -f Dockerfile.grafana .
          docker push $ECR_REGISTRY/grafana:$IMAGE_TAG

  deploy:
    name: ‚ò∏Ô∏è Deploy to EKS
    needs: [dashboard, mockapi, prometheus, alertmanager, grafana]
    runs-on: ubuntu-latest
    steps:
      - name: üßæ Checkout repo
        uses: actions/checkout@v3

      - name: üõ°Ô∏è Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEPLOYER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEPLOYER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîç Show AWS Caller Identity
        run: aws sts get-caller-identity

      - name: üîç List EKS clusters
        run: aws eks list-clusters --region ${{ env.AWS_REGION }}

      - name: ‚ò∏Ô∏è Set up kubeconfig
        run: aws eks update-kubeconfig --name k8-devops-dashboard --region ${{ env.AWS_REGION }}

      - name: ‚ò∏Ô∏è Show current kubectl context
        run: kubectl config current-context

      - name: ‚ò∏Ô∏è Verify access to EKS
        run: kubectl get nodes

      - name: ‚ò∏Ô∏è List namespaces
        run: kubectl get namespaces
  
      - name: üîç Helm Dry Run
        run: helm upgrade --install dashboard ./chart --namespace staging --dry-run

      - name: üöÄ Deploy Helm chart
        run: |
          helm upgrade --install dashboard ./chart \
            --namespace staging \
            --create-namespace \
            --wait

      # - name: üì¶ Set up Terraform
      #   uses: hashicorp/setup-terraform@v2

      # - name: ‚õèÔ∏è Terraform Init & Apply
      #   run: |
      #     terraform init
      #     terraform apply -auto-approve
      #   working-directory: ./terraform

      # - name: üöÄ Start ECS Dashboard Service
      #   run: |
      #     aws ecs update-service \
      #       --cluster $ECS_CLUSTER \
      #       --service $DASHBOARD_SERVICE \
      #       --desired-count 1 \
      #       --region $AWS_REGION

      # - name: üöÄ Start ECS Prometheus Service
      #   run: |
      #     aws ecs update-service \
      #       --cluster $ECS_CLUSTER \
      #       --service $PROMETHEUS_SERVICE \
      #       --desired-count 1 \
      #       --region $AWS_REGION

      # - name: ‚è±Ô∏è Wait 30 minutes before teardown
      #   run: sleep 1800

      # - name: üóëÔ∏è Destroy ALB Resources Only
      #   run: |
      #     terraform init
      #     terraform apply -auto-approve -target=aws_lb.dashboard_alb -destroy
      #     terraform apply -auto-approve -target=aws_lb_listener.http -destroy
      #     terraform apply -auto-approve -target=aws_lb_target_group.dashboard_tg -destroy
      #   working-directory: ./terraform

      # - name: üõë Stop ECS Services (Scale to 0)
      #   if: always()
      #   run: |
      #     aws ecs update-service \
      #       --cluster $ECS_CLUSTER \
      #       --service $DASHBOARD_SERVICE \
      #       --desired-count 0 \
      #       --region $AWS_REGION

      #     aws ecs update-service \
      #       --cluster $ECS_CLUSTER \
      #       --service $PROMETHEUS_SERVICE \
      #       --desired-count 0 \
      #       --region $AWS_REGION

      # - name: ‚úÖ Confirm teardown
      #   run: echo "ALB and ECS services shut down to save cost."